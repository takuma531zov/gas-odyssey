import { Environment } from './env';
import type { ContactPageResult } from './types/interfaces';
import { HIGH_PRIORITY_PATTERNS, EXCLUDED_KEYWORDS, HIGH_PRIORITY_CONTACT_KEYWORDS, MEDIUM_PRIORITY_CONTACT_KEYWORDS, SUBMIT_BUTTON_KEYWORDS, FORM_KEYWORDS } from './constants/ContactConstants';
import { SEARCH_PATTERNS, CONFIDENCE_LEVELS, NAVIGATION_SELECTORS, VALIDATION_PATTERNS, FORM_LINK_PATTERNS, FORM_TEXT_PATTERNS, NEGATIVE_KEYWORDS, HOMEPAGE_PATTERNS, CONTACT_LINK_KEYWORDS, GOOGLE_FORM_EXCLUDE_KEYWORDS, GOOGLE_FORM_CONTACT_KEYWORDS } from './constants/SearchConstants';
import { UrlUtils } from './utils/UrlUtils';
import { PurityUtils } from './utils/PurityUtils';
import { HtmlAnalyzer } from './analyzers/HtmlAnalyzer';
import { FormAnalyzer } from './analyzers/FormAnalyzer';
import { UrlPatternStrategy } from './strategies/UrlPatternStrategy';

// === Ê©üËÉΩ„É¢„Ç∏„É•„Éº„É´Áæ§„Ç§„É≥„Éù„Éº„Éà ===
import { 
  initializeContactSearch as moduleInitializeContactSearch,
  resetCandidates as moduleResetCandidates, 
  checkDomainAvailability as moduleCheckDomainAvailability,
  type InitializationState 
} from './modules/initialization';  // ÂàùÊúüÂåñ„ÉªÊ§úË®ºÊ©üËÉΩ (modules/initialization/index.ts)

import {
  analyzeHtmlContent as moduleAnalyzeHtmlContent,
  searchInNavigation as moduleSearchInNavigation,
  analyzeAnchorSection as moduleAnalyzeAnchorSection, 
  findActualForm as moduleFindActualForm,
  type Step2AnalysisState
} from './modules/step2Analysis';  // Step2Ëß£ÊûêÊ©üËÉΩ (modules/step2Analysis/index.ts)

import {
  getFinalFallbackUrl as moduleGetFinalFallbackUrl,
  evaluateFallbackUrlQuality as moduleEvaluateFallbackUrlQuality,
  calculateCandidateScore as moduleCalculateCandidateScore,
  logPotentialCandidate as moduleLogPotentialCandidate,
  type FallbackState
} from './modules/fallbackSystem';  // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÊ©üËÉΩ (modules/fallbackSystem/index.ts)

import {
  validateContactPageContent as moduleValidateContactPageContent,
  validateGoogleFormContent as moduleValidateGoogleFormContent,
  isValidContactPage as moduleIsValidContactPage
} from './modules/formValidation';  // „Éï„Ç©„Éº„É†Ê§úË®ºÊ©üËÉΩ (modules/formValidation/index.ts)

import {
  extractContactLinks as moduleExtractContactLinks,
  hasContactRelatedLinks as moduleHasContactRelatedLinks
} from './modules/linkAnalysis';  // „É™„É≥„ÇØËß£ÊûêÊ©üËÉΩ (modules/linkAnalysis/index.ts)

import {
  fetchWithTimeout as moduleFetchWithTimeout,
  getDetailedErrorMessage as moduleGetDetailedErrorMessage,
  getDetailedNetworkError as moduleGetDetailedNetworkError
} from './modules/httpUtils';  // HTTPÈÄö‰ø°Ê©üËÉΩ (modules/httpUtils/index.ts)

import {
  executeSPAAnalysis as moduleExecuteSPAAnalysis,
  detectSameHtmlPattern as moduleDetectSameHtmlPattern
} from './modules/spaAnalysis';  // SPAËß£ÊûêÊ©üËÉΩ (modules/spaAnalysis/index.ts)

/**
 * ContactPageFinder - BtoBÂñ∂Ê•≠Áî®Âïè„ÅÑÂêà„Çè„Åõ„Éö„Éº„Ç∏Ëá™ÂãïÊ§úÁ¥¢„Ç∑„Çπ„ÉÜ„É†
 *
 * „ÄêÁõÆÁöÑ„Äë
 * - ‰ºÅÊ•≠„Çµ„Ç§„Éà„Åã„ÇâÂïè„ÅÑÂêà„Çè„Åõ„Éö„Éº„Ç∏„ÇíËá™ÂãïÁô∫Ë¶ã
 * - Google Apps ScriptÁí∞Â¢É„Åß„ÅÆÂÆâÂÆöÂãï‰Ωú
 * - BtoBÂñ∂Ê•≠Ê¥ªÂãï„ÅÆÂäπÁéáÂåñÊîØÊè¥
 *
 * „ÄêÊ§úÁ¥¢Êà¶Áï•„Äë
 * Step1: URL„Éë„Çø„Éº„É≥Êé®Ê∏¨ÔºàÈ´òÈÄü„ÉªÈ´òÁ≤æÂ∫¶Ôºâ
 * Step2: HTMLËß£Êûê„Å´„Çà„Çã„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÊ§úÁ¥¢
 * Final: ÊúÄÁµÇ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÔºàStep1„ÅÆ200 OK„Éö„Éº„Ç∏‰ΩøÁî®Ôºâ
 *
 * „ÄêÂØæÂøúÊ©üËÉΩ„Äë
 * - SPAÔºàSingle Page ApplicationÔºâÂØæÂøú
 * - Google FormsÊ§úÂá∫
 * - Âüã„ÇÅËæº„Åø„Éï„Ç©„Éº„É†ÂØæÂøú
 * - JavaScriptÂãïÁöÑ„Éï„Ç©„Éº„É†Ê§úÂá∫
 * - „Çø„Ç§„É†„Ç¢„Ç¶„ÉàÁÆ°ÁêÜ„Å´„Çà„ÇãÂÆâÂÆöÊÄßÁ¢∫‰øù
 */
class ContactPageFinder {

  // ==========================================
  // Áä∂ÊÖãÁÆ°ÁêÜ„Éª„Ç≠„É£„ÉÉ„Ç∑„É•„Ç∑„Çπ„ÉÜ„É†Ôºà„É¢„Ç∏„É•„Éº„É´ÂåñÁµ±ÂêàÔºâ
  // ==========================================

  /**
   * ÂàùÊúüÂåñÁä∂ÊÖãÁÆ°ÁêÜ
   * modules/initialization „ÅßÁÆ°ÁêÜ„Åï„Çå„ÇãÁä∂ÊÖãÂ§âÊï∞Áæ§
   */
  private static initState: InitializationState = {
    candidatePages: [],
    validUrls: [],
    successfulFormUrls: [],
    sameHtmlCache: {}
  };

  // ==========================================
  // ÂæåÊñπ‰∫íÊèõÊÄß„ÅÆ„Åü„ÇÅ„ÅÆ„Éó„É≠„Éë„ÉÜ„Ç£Ôºà„É¨„Ç¨„Ç∑„Éº„Ç¢„ÇØ„Çª„ÇπÁî®Ôºâ
  // ==========================================

  /**
   * ÂÄôË£ú„Éö„Éº„Ç∏Ë®òÈå≤„Ç∑„Çπ„ÉÜ„É†Ôºà„É¨„Ç¨„Ç∑„Éº„Ç¢„ÇØ„Çª„ÇπÁî®Ôºâ
   * modules/initialization „ÅÆÁä∂ÊÖã„ÇíÂèÇÁÖß
   */
  private static get candidatePages() { return this.initState.candidatePages; }
  private static set candidatePages(value) { this.initState.candidatePages = value; }

  /**
   * 200 OK URL„É™„Çπ„ÉàÔºà„É¨„Ç¨„Ç∑„Éº„Ç¢„ÇØ„Çª„ÇπÁî®Ôºâ  
   * modules/initialization „ÅÆÁä∂ÊÖã„ÇíÂèÇÁÖß
   */
  private static get validUrls() { return this.initState.validUrls; }
  private static set validUrls(value) { this.initState.validUrls = value; }

  /**
   * ÊàêÂäü„Åó„Åü„Éï„Ç©„Éº„É†URL„É™„Çπ„ÉàÔºà„É¨„Ç¨„Ç∑„Éº„Ç¢„ÇØ„Çª„ÇπÁî®Ôºâ
   * modules/initialization „ÅÆÁä∂ÊÖã„ÇíÂèÇÁÖß
   */
  private static get successfulFormUrls() { return this.initState.successfulFormUrls; }
  private static set successfulFormUrls(value) { this.initState.successfulFormUrls = value; }





  // ==========================================
  // SPAÊ§úÂá∫„ÉªÂêå‰∏ÄHTMLÂà§ÂÆö„Ç∑„Çπ„ÉÜ„É†
  // ==========================================

  /**
   * Âêå‰∏ÄHTML„É¨„Çπ„Éù„É≥„ÇπÊ§úÂá∫„Ç≠„É£„ÉÉ„Ç∑„É•Ôºà„É¨„Ç¨„Ç∑„Éº„Ç¢„ÇØ„Çª„ÇπÁî®Ôºâ
   * modules/initialization „ÅÆÁä∂ÊÖã„ÇíÂèÇÁÖß
   */
  private static get sameHtmlCache() { return this.initState.sameHtmlCache; }
  private static set sameHtmlCache(value) { this.initState.sameHtmlCache = value; }


  // ==========================================
  // „É°„Ç§„É≥Ê§úÁ¥¢„Ç®„É≥„Éà„É™„Éº„Éù„Ç§„É≥„Éà
  // ==========================================

  /**
   * Âïè„ÅÑÂêà„Çè„Åõ„Éö„Éº„Ç∏Ê§úÁ¥¢„ÅÆ„É°„Ç§„É≥„Ç®„É≥„Éà„É™„Éº„Éù„Ç§„É≥„Éà
   *
   * @param baseUrl Ê§úÁ¥¢ÂØæË±°„ÅÆ„Éô„Éº„ÇπURLÔºà‰ºÅÊ•≠„Çµ„Ç§„Éà„ÅÆ„Éà„ÉÉ„Éó„Éö„Éº„Ç∏Á≠âÔºâ
   * @returns ContactPageResult Ê§úÁ¥¢ÁµêÊûúÔºàURL„ÄÅ„Éï„Ç©„Éº„É†ÊÉÖÂ†±„ÄÅÊ§úÁ¥¢ÊâãÊ≥ïÁ≠âÔºâ
   *
   * „ÄêÂá¶ÁêÜ„Éï„É≠„Éº„Äë
   * 1. ÂàùÊúüÂåñÂá¶ÁêÜÔºàÂÄôË£ú„É™„Çª„ÉÉ„Éà„ÄÅ„Çø„Ç§„Éû„ÉºÈñãÂßãÔºâ
   * 2. SNS„Éö„Éº„Ç∏Âà§ÂÆöÔºàFacebook„ÄÅTwitterÁ≠â„ÅØÈô§Â§ñÔºâ
   * 3. „Éâ„É°„Ç§„É≥ÁîüÂ≠òÁ¢∫Ë™çÔºà„Çµ„Ç§„ÉàÈñâÈéñ„ÉÅ„Çß„ÉÉ„ÇØÔºâ
   * 4. Step1: URL„Éë„Çø„Éº„É≥Êé®Ê∏¨Ê§úÁ¥¢
   * 5. Step2: HTMLËß£Êûê„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÊ§úÁ¥¢
   * 6. ÊúÄÁµÇ„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ: Step1„ÅÆ200 OK„Éö„Éº„Ç∏‰ΩøÁî®
   *
   * ÂÆüË£ÖÊ≥®ÊÑè‰∫ãÈ†Ö:
   * - GASÁí∞Â¢É„Åß„ÅÆ„Çø„Ç§„É†„Ç¢„Ç¶„ÉàÁÆ°ÁêÜÔºà„Éá„Éï„Ç©„É´„Éà80ÁßíÔºâ
   * - „É°„É¢„É™ÂäπÁéá„ÇíËÄÉÊÖÆ„Åó„Åü„Ç≠„É£„ÉÉ„Ç∑„É•ÁÆ°ÁêÜ
   * - BtoBÂñ∂Ê•≠Áî®ÈÄî„Å´ÁâπÂåñ„Åó„Åü„Ç≠„Éº„ÉØ„Éº„ÉâÈáç„Åø‰ªò„Åë
   * - SPAÔºàSingle Page ApplicationÔºâÂØæÂøú
   */
  static findContactPage(baseUrl: string): ContactPageResult {
    const startTime = Date.now();
    const maxTotalTime = Environment.getMaxTotalTime();

    try {
      // ÂàùÊúüÂåñ„ÉªÊ§úË®ºÂá¶ÁêÜ
      const initResult = this.initializeContactSearch(baseUrl);
      if (initResult) {
        return initResult; // Êó©ÊúüreturnÔºàSNS/„Éâ„É°„Ç§„É≥ÁÑ°Âäπ„ÅÆÂ†¥ÂêàÔºâ
      }

      // Extract domain for subdirectory pattern support
      const domainUrl = UrlUtils.extractDomain(baseUrl);

      console.log(`Starting contact page search for: ${baseUrl}`);

      // STEP 1: URL pattern guessing with integrated SPA detection (HIGHEST PRIORITY - Fast & Accurate)
      console.log('Step 1: URL pattern guessing with SPA optimization (primary strategy)');
      const urlPatternStrategy = new UrlPatternStrategy();
      const strategyResult = urlPatternStrategy.searchDetailed(domainUrl);

      if (strategyResult) {
        const priorityResult = strategyResult.result;
        // ÊúâÂäπURL„É™„Çπ„Éà„ÇíÊõ¥Êñ∞
        this.validUrls = strategyResult.validUrls;

        if (priorityResult.contactUrl) {
          console.log(`‚úÖ Found via URL pattern search: ${priorityResult.contactUrl}`);
          return priorityResult;
        }

        // „Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÅØÂç≥Â∫ß„Å´Ëøî„ÅôÔºàfallbackÂá¶ÁêÜ„Çí„Çπ„Ç≠„ÉÉ„ÉóÔºâ
        if (priorityResult.searchMethod === 'dns_error' || priorityResult.searchMethod === 'bot_blocked') {
          console.log(`URL pattern search returned error: ${priorityResult.searchMethod}, stopping here`);
          return priorityResult;
        }
      }

      // Check remaining time
      if (Date.now() - startTime > maxTotalTime) {
        console.log('Timeout reached during URL pattern search');
        return {
          contactUrl: null,
          actualFormUrl: null,
          foundKeywords: ['timeout'],
          searchMethod: 'timeout'
        };
      }

      // STEP 2: Homepage HTML analysis (FALLBACK for special cases like ye-p.co.jp)
      console.log('Step 2: Homepage HTML analysis as fallback for special cases');
      try {
        const response = moduleFetchWithTimeout(baseUrl, 7000); // 7Áßí„Çø„Ç§„É†„Ç¢„Ç¶„Éà
        const html = HtmlAnalyzer.getContentWithEncoding(response); // üî• ÊñáÂ≠óÂåñ„ÅëËß£Ê±∫

        // Check for Google Forms URLs first
        const googleFormUrls = FormAnalyzer.findGoogleFormUrlsOnly(html);
        if (googleFormUrls) {
          console.log(`‚úÖ Found Google Form URL on homepage: ${googleFormUrls}`);
          return {
            contactUrl: baseUrl,
            actualFormUrl: googleFormUrls,
            foundKeywords: ['homepage_google_form'],
            searchMethod: 'homepage_google_form_fallback'
          };
        }

        // Analyze HTML content for contact links
        const step2State: Step2AnalysisState = { successfulFormUrls: this.successfulFormUrls };
        const result = moduleAnalyzeHtmlContent(html, baseUrl, step2State, moduleFetchWithTimeout);

        // If we found a contact page, try to find the actual form within it
        if (result.contactUrl) {
          console.log(`Found contact link on homepage: ${result.contactUrl}`);
          const formUrl = moduleFindActualForm(result.contactUrl, moduleFetchWithTimeout);
          result.actualFormUrl = formUrl;
          result.searchMethod = 'homepage_link_fallback';

          // If actual form found, return it
          if (result.actualFormUrl && result.actualFormUrl.startsWith('http')) {
            console.log(`‚úÖ Verified actual form at: ${result.actualFormUrl}`);
            return result;
          } else if (result.actualFormUrl === 'embedded_contact_form_on_page') {
            console.log(`‚úÖ Verified embedded form at: ${result.contactUrl}`);
            // Fix: Return actual contact URL instead of placeholder
            result.actualFormUrl = result.contactUrl;
            return result;
          } else {
            console.log(`Contact page found but no form verified: ${result.contactUrl}`);
            return result;
          }
        }

        // Check for embedded forms as last resort
        const embeddedFormResult = FormAnalyzer.findEmbeddedHTMLForm(html);
        if (embeddedFormResult) {
          console.log(`‚úÖ Found embedded form on homepage as last resort`);
          return {
            contactUrl: baseUrl,
            actualFormUrl: baseUrl, // Fix: Return actual URL instead of placeholder
            foundKeywords: ['homepage_embedded_form'],
            searchMethod: 'homepage_embedded_fallback'
          };
        }

        console.log('HTML analysis fallback found nothing');

      } catch (homepageError) {
        const detailedError = moduleGetDetailedNetworkError(homepageError);
        console.log(`Error in homepage analysis fallback: ${detailedError}`);
      }

      // FINAL FALLBACK: Return first valid contact URL from Step1 if available
      console.log('All search methods failed, checking final fallback...');
      const fallbackState: FallbackState = { 
        validUrls: this.validUrls, 
        candidatePages: this.candidatePages 
      };
      const fallbackResult = moduleGetFinalFallbackUrl(fallbackState);
      if (fallbackResult.contactUrl) {
        console.log(`‚úÖ Final fallback successful: ${fallbackResult.contactUrl}`);
        return fallbackResult;
      }

      console.log('All search methods failed, including final fallback');
      return {
        contactUrl: null,
        actualFormUrl: null,
        foundKeywords: [],
        searchMethod: 'not_found'
      };
    } catch (error) {
      const detailedError = moduleGetDetailedNetworkError(error);
      console.error(`Error fetching ${baseUrl}: ${detailedError}`);
      return {
        contactUrl: null,
        actualFormUrl: null,
        foundKeywords: [detailedError],
        searchMethod: 'error'
      };
    }
  }

  /**
   * ÂàùÊúüÂåñ„ÉªÊ§úË®ºÂá¶ÁêÜÔºà„Éó„É≠„Ç≠„Ç∑Ôºâ
   * modules/initialization/index.ts „ÅÆÊ©üËÉΩ„ÇíÂëº„Å≥Âá∫„Åó
   * @param baseUrl Ê§úË®ºÂØæË±°URL
   * @returns Êó©ÊúüÁµÇ‰∫Ü„ÅÆÂ†¥Âêà„ÅØÁµêÊûú„ÄÅÁ∂ôÁ∂ö„ÅÆÂ†¥Âêà„ÅØnull
   */
  private static initializeContactSearch(baseUrl: string): ContactPageResult | null {
    return moduleInitializeContactSearch(baseUrl, this.initState);
  }

  // ==========================================
  // HTMLËß£Êûê„Éª„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØÊ§úÁ¥¢„Ç∑„Çπ„ÉÜ„É†
  // ==========================================

  // ==========================================
  // „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥Ëß£Êûê„Ç∑„Çπ„ÉÜ„É†
  // ==========================================

  /**
   * „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥ÂÜÖÊ§úÁ¥¢
   * „Éö„Éº„Ç∏„ÅÆ„Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥Ë¶ÅÁ¥†„Åã„ÇâÂïè„ÅÑÂêà„Çè„Åõ„É™„É≥„ÇØ„ÇíÊ§úÁ¥¢
   * @param html Ê§úÁ¥¢ÂØæË±°HTML
   * @param baseUrl „Éô„Éº„ÇπURL
   * @returns „Éä„Éì„Ç≤„Éº„Ç∑„Éß„É≥Ê§úÁ¥¢ÁµêÊûú
   */

  // ==========================================
  // „É™„É≥„ÇØÊäΩÂá∫„ÉªËß£Êûê„Ç∑„Çπ„ÉÜ„É†
  // ==========================================







  /**
   * Âïè„ÅÑÂêà„Çè„Åõ„É™„É≥„ÇØÊäΩÂá∫
   * HTMLÂÜÖÂÆπ„Åã„ÇâÂïè„ÅÑÂêà„Çè„ÅõÈñ¢ÈÄ£„É™„É≥„ÇØ„ÇíÊäΩÂá∫„ÉªËß£Êûê
   * @param content Ëß£ÊûêÂØæË±°HTMLÂÜÖÂÆπ
   * @param baseUrl „Éô„Éº„ÇπURL
   * @param contextType „Ç≥„É≥„ÉÜ„Ç≠„Çπ„Éà„Çø„Ç§„ÉóÔºàgeneral/navigationÁ≠âÔºâ
   * @returns ÊäΩÂá∫„Åï„Çå„Åü„É™„É≥„ÇØÊÉÖÂ†±
   */



  // ==========================================
  // „É¶„Éº„ÉÜ„Ç£„É™„ÉÜ„Ç£„ÉªË£úÂä©Ê©üËÉΩ„Ç∑„Çπ„ÉÜ„É†
  // ==========================================

  /**
   * „Éà„ÉÉ„Éó„Éö„Éº„Ç∏URLÂà§ÂÆö
   * ÔºíÊÆµÈöé„É™„É≥„ÇØÊ§úÂá∫„Åß„ÅÆÈô§Â§ñÁî®Âà§ÂÆö
   * @param url Âà§ÂÆöÂØæË±°URL
   * @param baseUrl „Éô„Éº„ÇπURL
   * @returns „Éà„ÉÉ„Éó„Éö„Éº„Ç∏„ÅÆÂ†¥Âêàtrue
   */
  private static isHomepageUrl(url: string, baseUrl: string): boolean {
    return PurityUtils.isHomepageUrl(url, baseUrl);
  }










  // ==========================================
  // ÂÄôË£úÁÆ°ÁêÜ„Éª„Çπ„Ç≥„Ç¢„É™„É≥„Ç∞„Ç∑„Çπ„ÉÜ„É†
  // ==========================================

  /**
   * ÊΩúÂú®ÁöÑÂÄôË£ú„Éö„Éº„Ç∏„ÅÆË®òÈå≤
   * Step1„ÅßÁô∫Ë¶ã„Åï„Çå„Åü„ÅåÁ¢∫ÂÆö„Åß„Åç„Å™„Åã„Å£„ÅüÂÄôË£ú„ÇíË®òÈå≤„ÉªË©ï‰æ°
   * @param url ÂÄôË£úURL
   * @param reason ÂÄôË£úÁêÜÁî±
   * @param html „Éö„Éº„Ç∏HTMLÂÜÖÂÆπ
   */

  /**
   * ÂÄôË£ú„Çπ„Ç≥„Ç¢Ë®àÁÆó
   * ÂÄôË£ú„Éö„Éº„Ç∏„ÅÆÂìÅË≥™„ÇíURL„ÄÅ„Éï„Ç©„Éº„É†ÂàÜÊûêÁµêÊûú„Å´Âü∫„Å•„ÅÑ„Å¶Êï∞ÂÄ§Âåñ
   * @param url ÂÄôË£úURL
   * @param reason ÂÄôË£úÁêÜÁî±
   * @param structuredAnalysis ÊßãÈÄ†Âåñ„Éï„Ç©„Éº„É†Ëß£ÊûêÁµêÊûú
   * @param formAnalysis „Éï„Ç©„Éº„É†Ëß£ÊûêÁµêÊûú
   * @returns Ë®àÁÆó„Åï„Çå„Åü„Çπ„Ç≥„Ç¢
   */

  /**
   * ÂÄôË£ú„É™„Çπ„Éà„É™„Çª„ÉÉ„ÉàÔºà„Éó„É≠„Ç≠„Ç∑Ôºâ
   * modules/initialization/index.ts „ÅÆÊ©üËÉΩ„ÇíÂëº„Å≥Âá∫„Åó
   */
  private static resetCandidates() {
    moduleResetCandidates(this.initState);
  }

  /**
   * Âïè„ÅÑÂêà„Çè„ÅõÈñ¢ÈÄ£„É™„É≥„ÇØÂ≠òÂú®„ÉÅ„Çß„ÉÉ„ÇØ
   * „Éö„Éº„Ç∏ÂÜÖ„Å´Âïè„ÅÑÂêà„Çè„ÅõÈñ¢ÈÄ£„ÅÆ„É™„É≥„ÇØ„ÅåÂ≠òÂú®„Åô„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØÔºàBtoBÂñ∂Ê•≠Áî®ÈÄîÁâπÂåñÔºâ
   * @param html Ê§úÁ¥¢ÂØæË±°HTML
   * @returns „É™„É≥„ÇØÂ≠òÂú®ÊÉÖÂ†±„Å®„É™„É≥„ÇØ„ÉÜ„Ç≠„Çπ„ÉàÈÖçÂàó
   */


  // Google Forms„ÅÆURL„ÅÆ„Åø„ÇíÊ§úÂá∫ÔºàÂüã„ÇÅËæº„Åø„Éï„Ç©„Éº„É†Ê§úÂá∫„ÅØÈô§Â§ñÔºâ



  // ==========================================
  // HTTPÈÄö‰ø°„Éª„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞„Ç∑„Çπ„ÉÜ„É†
  // ==========================================

  /**
   * „Çø„Ç§„É†„Ç¢„Ç¶„Éà‰ªò„ÅçHTTPÂèñÂæó
   * GASÁí∞Â¢É„Åß„ÅÆHTTP„É™„ÇØ„Ç®„Çπ„ÉàÂÆüË°åÔºà„Çø„Ç§„É†„Ç¢„Ç¶„ÉàÁÆ°ÁêÜÔºâ
   * @param url ÂèñÂæóÂØæË±°URL
   * @param _timeoutMs „Çø„Ç§„É†„Ç¢„Ç¶„ÉàÊôÇÈñìÔºàmsÔºâ‚ÄªGAS„Åß„ÅØÂà©Áî®‰∏çÂèØ
   * @returns HTTP„É¨„Çπ„Éù„É≥„Çπ
   */



  // ==========================================
  // „Éï„Ç©„Éº„É†Ê§úË®º„ÉªÂÜÖÂÆπËß£Êûê„Ç∑„Çπ„ÉÜ„É†
  // ==========================================

  /**
   * Âïè„ÅÑÂêà„Çè„Åõ„Éö„Éº„Ç∏ÂÜÖÂÆπÊ§úË®º
   * „Éö„Éº„Ç∏HTML„Åã„ÇâÂÆüÈöõ„ÅÆ„Éï„Ç©„Éº„É†URL„ÇíÊ§úÂá∫„ÉªÊ§úË®º
   * @param html „Éö„Éº„Ç∏HTMLÂÜÖÂÆπ
   * @param pageUrl „Éö„Éº„Ç∏URL
   * @returns Ê§úË®ºÁµêÊûúÔºà„Éï„Ç©„Éº„É†URL„Å®„Ç≠„Éº„ÉØ„Éº„ÉâÔºâ
   */

  /**
   * Google FormÂÜÖÂÆπÊ§úË®º
   * Google Form„ÅåÂïè„ÅÑÂêà„Çè„Åõ„Éï„Ç©„Éº„É†„Åã„Å©„ÅÜ„ÅãÂà§ÂÆöÔºàÊé°Áî®„Éª„Ç¢„É≥„Ç±„Éº„ÉàÁ≠â„ÇíÈô§Â§ñÔºâ
   * @param html „Éö„Éº„Ç∏HTMLÂÜÖÂÆπ
   * @param googleFormUrl Google Form„ÅÆURL
   * @returns ÊúâÂäπ„Å™Âïè„ÅÑÂêà„Çè„Åõ„Éï„Ç©„Éº„É†„ÅÆÂ†¥Âêàtrue
   */

  private static getDetailedErrorMessage(statusCode: number): string {
    return PurityUtils.getDetailedErrorMessage(statusCode);
  }

  /**
   * Ë©≥Á¥∞„Éç„ÉÉ„Éà„ÉØ„Éº„ÇØ„Ç®„É©„ÉºËß£Êûê
   * „Ç®„É©„Éº„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Åã„ÇâË©≥Á¥∞„Å™„Ç®„É©„ÉºÂéüÂõ†„ÇíÁâπÂÆö
   * @param error „Ç®„É©„Éº„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà
   * @returns Ë©≥Á¥∞„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
   */
  private static getDetailedNetworkError(error: any): string {
    return PurityUtils.getDetailedNetworkError(error);
  }

  /**
   * „Éâ„É°„Ç§„É≥ÁîüÂ≠òÁ¢∫Ë™çÔºà„Éó„É≠„Ç≠„Ç∑Ôºâ
   * modules/initialization/index.ts „ÅÆÊ©üËÉΩ„ÇíÂëº„Å≥Âá∫„Åó
   * @param baseUrl Á¢∫Ë™çÂØæË±°URL
   * @returns ÁîüÂ≠òÁä∂Ê≥Å„Å®Ë©≥Á¥∞„Ç®„É©„Éº
   */
  private static checkDomainAvailability(baseUrl: string): { available: boolean, error?: string } {
    return moduleCheckDomainAvailability(baseUrl);
  }




}

/**
 * ÂæåÊñπ‰∫íÊèõÊÄßÁ∂≠ÊåÅ„ÅÆ„Åü„ÇÅ„ÅÆ„É©„ÉÉ„Éë„ÉºÈñ¢Êï∞
 * Êó¢Â≠ò„ÅÆÂëº„Å≥Âá∫„ÅóÂÖÉ„Ç≥„Éº„Éâ„ÇíÂ§âÊõ¥„Åõ„Åö„Å´Êñ∞„Åó„ÅÑ„Ç¢„Éº„Ç≠„ÉÜ„ÇØ„ÉÅ„É£„Çí‰ΩøÁî®ÂèØËÉΩ
 *
 * @param url Ê§úÁ¥¢ÂØæË±°URL
 * @returns ContactPageResult Ê§úÁ¥¢ÁµêÊûú
 *
 * ‰ΩøÁî®‰æã:
 * const result = findContactPage('https://example.com');
 * console.log(result.contactUrl); // Âïè„ÅÑÂêà„Çè„Åõ„Éö„Éº„Ç∏URL
 * console.log(result.searchMethod); // ‰ΩøÁî®„Åï„Çå„ÅüÊ§úÁ¥¢ÊâãÊ≥ï
 */
function findContactPage(url: string): ContactPageResult {
  return ContactPageFinder.findContactPage(url);
}

function processContactPageFinder() {
  try {
    // „Çπ„ÇØ„É™„Éó„Éà„Éó„É≠„Éë„ÉÜ„Ç£„Åã„ÇâË®≠ÂÆöÂÄ§„ÇíÂèñÂæó
    const properties = PropertiesService.getScriptProperties();
    const sheetName = properties.getProperty('SHEET');
    const maxCountStr = properties.getProperty('MAX_COUNT');
    const headerRowStr = properties.getProperty('HEADER_ROW');

    if (!sheetName) {
      throw new Error('„Çπ„ÇØ„É™„Éó„Éà„Éó„É≠„Éë„ÉÜ„Ç£„ÄåSHEET„Äç„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
    }

    const sheet = SpreadsheetApp.getActiveSpreadsheet().getSheetByName(sheetName);
    if (!sheet) {
      throw new Error(`„Ç∑„Éº„Éà„Äå${sheetName}„Äç„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì`);
    }

    // MAX_COUNT„ÅÆÂá¶ÁêÜÔºàÊú™Ë®≠ÂÆö„ÅÆÂ†¥Âêà„ÅØÂà∂Èôê„Å™„ÅóÔºâ
    const maxCount = maxCountStr ? parseInt(maxCountStr, 10) : null;
    if (maxCountStr && isNaN(maxCount!)) {
      throw new Error('„Çπ„ÇØ„É™„Éó„Éà„Éó„É≠„Éë„ÉÜ„Ç£„ÄåMAX_COUNT„Äç„ÅØÊï∞ÂÄ§„ÅßË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
    }

    // HEADER_ROW„ÅÆÂá¶ÁêÜÔºàÊú™Ë®≠ÂÆö„ÅÆÂ†¥Âêà„ÅØ1Ë°åÁõÆÔºâ
    const headerRow = headerRowStr ? parseInt(headerRowStr, 10) : 1;
    if (headerRowStr && isNaN(headerRow!)) {
      throw new Error('„Çπ„ÇØ„É™„Éó„Éà„Éó„É≠„Éë„ÉÜ„Ç£„ÄåHEADER_ROW„Äç„ÅØÊï∞ÂÄ§„ÅßË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
    }

    console.log(`Âá¶ÁêÜ‰∏äÈôê: ${maxCount ? `${maxCount}Ë°å` : 'Âà∂Èôê„Å™„Åó'}`);
    console.log(`„Éò„ÉÉ„ÉÄ„ÉºË°å: ${headerRow}Ë°åÁõÆÔºàÂá¶ÁêÜÂØæË±°„Åã„ÇâÈô§Â§ñÔºâ`);

    // LÂàó„ÅÆÊúÄÁµÇË°å„ÇíÂèñÂæó
    const lastRowL = sheet.getLastRow();

    // APÂàó„ÅÆÊúÄÁµÇË°å„ÇíÂèñÂæóÔºà„Éá„Éº„Çø„Åå„ÅÇ„ÇãË°åÔºâ
    const apRange = sheet.getRange('AP:AP');
    const apValues = apRange.getValues();
    let lastRowAP = 0;
    for (let i = apValues.length - 1; i >= 0; i--) {
      const row = apValues[i];
      if (row && row[0] !== '') {
        lastRowAP = i + 1;
        break;
      }
    }

    // Âá¶ÁêÜÂØæË±°Ë°å„ÅÆÁØÑÂõ≤„ÇíÊ±∫ÂÆö
    const startRow = lastRowAP + 1;
    let endRow = lastRowL;

    if (startRow > endRow) {
      console.log('Âá¶ÁêÜÂØæË±°„ÅÆURL„Åå„ÅÇ„Çä„Åæ„Åõ„Çì');
      return;
    }

    // MAX_COUNT„Å´„Çà„Çã‰∏äÈôêÂà∂Âæ°
    if (maxCount && (endRow - startRow + 1) > maxCount) {
      endRow = startRow + maxCount - 1;
      console.log(`MAX_COUNTÂà∂Èôê„Å´„Çà„ÇäÂá¶ÁêÜË°åÊï∞„Çí${maxCount}Ë°å„Å´Âà∂Èôê„Åó„Åæ„Åô`);
    }

    console.log(`Âá¶ÁêÜÂØæË±°Ë°å: ${startRow}Ë°åÁõÆ„Åã„Çâ${endRow}Ë°åÁõÆ„Åæ„ÅßÔºà${endRow - startRow + 1}Ë°åÔºâ`);

    // LÂàó„ÅÆURL„Çí‰∏ÄÊã¨ÂèñÂæó
    const urlRange = sheet.getRange(startRow, 12, endRow - startRow + 1, 1); // LÂàó„ÅØ12ÂàóÁõÆ
    const urls = urlRange.getValues();

    // ÁµêÊûúÈÖçÂàó„ÇíÊ∫ñÂÇô
    const results = [];

    // ÂêÑURL„ÇíÂá¶ÁêÜ
    for (let i = 0; i < urls.length; i++) {
      const urlRow = urls[i];
      const url = urlRow && urlRow[0];
      const currentRow = startRow + i;

      if (!url || url.toString().trim() === '') {
        results.push(['']);
        continue;
      }

      // „Éò„ÉÉ„ÉÄ„ÉºË°å„ÅÆÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó
      if (currentRow === headerRow) {
        console.log(`${currentRow}Ë°åÁõÆ: „Éò„ÉÉ„ÉÄ„ÉºË°å„ÅÆ„Åü„ÇÅ„Çπ„Ç≠„ÉÉ„Éó`);
        results.push(['']);
        continue;
      }

      console.log(`${currentRow}Ë°åÁõÆ: ${url} „ÇíÂá¶ÁêÜ‰∏≠...`);

      try {
        const result = findContactPage(url.toString().trim());

        console.log(`Result for ${currentRow}Ë°åÁõÆ: searchMethod=${result.searchMethod}, foundKeywords=${result.foundKeywords ? result.foundKeywords.join(',') : 'none'}`);

        // actualFormURL„Çí„ÉÅ„Çß„ÉÉ„ÇØ„Åó„Å¶Âá∫ÂäõÂÄ§„ÇíÊ±∫ÂÆö
        let outputValue = '';

        // „Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÅØ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂá∫Âäõ
        if (result.searchMethod === 'error' || result.searchMethod === 'dns_error' || result.searchMethod === 'bot_blocked' || result.searchMethod === 'site_closed') {
          if (result.foundKeywords && result.foundKeywords.length > 0) {
            outputValue = result.foundKeywords[0] || '„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü'; // Ë©≥Á¥∞„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
            console.log(`Using error message: ${outputValue}`);
          } else {
            outputValue = '„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü';
            console.log(`Using default error message: ${outputValue}`);
          }
        } else if (result.actualFormUrl) {
          // ÂÆüÈöõ„ÅÆURL„ÅÆÂ†¥Âêà„ÅØ„Åù„ÅÆURL„ÄÅË≠òÂà•Â≠ê„ÅÆÂ†¥Âêà„ÅØ„Éï„Ç©„Éº„É†„ÅåÂ≠òÂú®„Åô„Çã„Éö„Éº„Ç∏„ÅÆURL„ÇíÂá∫Âäõ
          if (result.actualFormUrl.startsWith('http')) {
            outputValue = result.actualFormUrl;
          } else {
            // Ë≠òÂà•Â≠ê„ÅÆÂ†¥Âêà„ÄÅ„Éï„Ç©„Éº„É†„ÅåÂ≠òÂú®„Åô„Çã„Éö„Éº„Ç∏„ÅÆURL„ÇíÂá∫Âäõ
            outputValue = result.contactUrl || url.toString().trim();
          }
        } else if (result.contactUrl) {
          // actualFormUrl„ÅØ„Å™„ÅÑ„Åå„ÄÅcontactUrl„Åå„ÅÇ„ÇãÂ†¥Âêà
          outputValue = result.contactUrl;
        } else {
          // SNS„Éö„Éº„Ç∏„ÇÑË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà
          outputValue = 'Âïè„ÅÑÂêà„Çè„Åõ„Éï„Ç©„Éº„É†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü';
        }

        results.push([outputValue]);
        console.log(`${currentRow}Ë°åÁõÆ: ÂÆå‰∫Ü - ${outputValue}`);

      } catch (error) {
        const errorMessage = `„Ç®„É©„Éº: ${error instanceof Error ? error.message : String(error)}`;
        results.push([errorMessage]);
        console.error(`${currentRow}Ë°åÁõÆ: ${errorMessage}`);
      }
    }

    // APÂàó„Å´ÁµêÊûú„Çí‰∏ÄÊã¨Êõ∏„ÅçËæº„Åø
    const outputRange = sheet.getRange(startRow, 42, results.length, 1); // APÂàó„ÅØ42ÂàóÁõÆ
    outputRange.setValues(results);

    console.log(`Âá¶ÁêÜÂÆå‰∫Ü: ${results.length}Ë°å„ÅÆÁµêÊûú„ÇíAPÂàó„Å´Âá∫Âäõ„Åó„Åæ„Åó„Åü`);

    // MAX_COUNTÂà∂Èôê„ÅßÂá¶ÁêÜ„ÅåÊâì„Å°Âàá„Çâ„Çå„ÅüÂ†¥Âêà„ÅÆÈÄöÁü•
    if (maxCount && results.length === maxCount && startRow + maxCount - 1 < lastRowL) {
      console.log(`Ê≥®ÊÑè: MAX_COUNT(${maxCount})Âà∂Èôê„Å´„Çà„ÇäÂá¶ÁêÜ„ÇíÂà∂Èôê„Åó„Åæ„Åó„Åü„ÄÇÊÆã„Çä${lastRowL - (startRow + maxCount - 1)}Ë°å„ÅÆ„Éá„Éº„Çø„ÅåÊú™Âá¶ÁêÜ„Åß„Åô„ÄÇ`);
    }

  } catch (error) {
    console.error('Âá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:', error);
    throw error;
  }
}

/**
 * „ÉÜ„Çπ„ÉàÁî®Èñ¢Êï∞
 * ‰ªªÊÑè„ÅÆURL„ÅßContactPageFinder„ÅÆÂãï‰Ωú„Çí„ÉÜ„Çπ„Éà
 */
function test() {
  // „ÉÜ„Çπ„ÉàÁî®URLÔºà‰ªªÊÑè„Å´Â§âÊõ¥ÂèØËÉΩÔºâ
  const testUrl = 'https://www.alleyoop.co.jp/';

  console.log(`\n=== URLFinder „ÉÜ„Çπ„ÉàÂÆüË°å: ${testUrl} ===`);
  const result = findContactPage(testUrl);

  console.log('=== Contact Page Finder Results ===');
  console.log(`Target URL: ${testUrl}`);
  console.log(`Contact URL: ${result.contactUrl}`);
  console.log(`Actual Form URL: ${result.actualFormUrl}`);
  console.log(`Found Keywords: ${result.foundKeywords.join(',')}`);
  console.log(`Search Method: ${result.searchMethod}`);
  console.log('=====================================');
}


/**
 * „Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„ÉàUI‰ªò„ÅçURLFinderÂÆüË°åÈñ¢Êï∞
 * GAS‰∏ä„ÅÆ„Çπ„Éó„É¨„ÉÉ„Éâ„Ç∑„Éº„Éà„Éú„Çø„É≥„Åã„ÇâÂÆüË°å„Åï„Çå„Çã
 */
function executeUrlFinderWithUI(): void {
  console.log('=== URLFinder UI ÈñãÂßã ===');

  try {
    // „ÉÅ„Çß„ÉÉ„ÇØË°åÊï∞„ÇíÂèñÂæó
    const checkedCount = getCheckedRowsCount();
    const maxCount = getMaxCountSetting();

    // ÂÆüË°å„Ç™„Éó„Ç∑„Éß„É≥ÈÅ∏Êäû„ÉÄ„Ç§„Ç¢„É≠„Ç∞„ÇíË°®Á§∫
    const htmlTemplate = HtmlService.createTemplateFromFile('simple-options');
    htmlTemplate.checkedCount = checkedCount;
    htmlTemplate.maxCount = maxCount;

    const htmlOutput = htmlTemplate.evaluate()
      .setWidth(450)
      .setHeight(320)
      .setXFrameOptionsMode(HtmlService.XFrameOptionsMode.ALLOWALL);

    SpreadsheetApp.getUi()
      .showModalDialog(htmlOutput, 'URLFinder - ÂÆüË°å„Ç™„Éó„Ç∑„Éß„É≥');

  } catch (error) {
    console.error('UIÂÆüË°å„Ç®„É©„Éº:', error);
    const err = error as Error;
    SpreadsheetApp.getUi().alert('„Ç®„É©„Éº', `ÂÆüË°å‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${err.message}`, SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * ÈÅ∏Êäû„Åï„Çå„Åü„Ç™„Éó„Ç∑„Éß„É≥„Å´Âü∫„Å•„ÅÑ„Å¶Âá¶ÁêÜ„ÇíÂÆüË°å
 * @param mode 'normal' | 'checked'
 */
function executeSelectedMode(mode: string): void {
  console.log(`ÈÅ∏Êäû„Åï„Çå„Åü„É¢„Éº„Éâ: ${mode}`);

  if (mode === 'normal') {
    executeNormalProcessing();
  } else if (mode === 'checked') {
    executeCheckedRowsProcessing();
  } else {
    throw new Error(`‰∏çÊòé„Å™ÂÆüË°å„É¢„Éº„Éâ: ${mode}`);
  }
}

/**
 * ÈÄöÂ∏∏Âá¶ÁêÜÔºàÊó¢Â≠ò„É≠„Ç∏„ÉÉ„ÇØ„Çí„Åù„ÅÆ„Åæ„Åæ‰ΩøÁî®Ôºâ
 */
function executeNormalProcessing(): void {
  console.log('=== ÈÄöÂ∏∏Âá¶ÁêÜÈñãÂßã ===');

  try {
    // Êó¢Â≠ò„ÅÆprocessContactPageFinderÈñ¢Êï∞„Çí„Åù„ÅÆ„Åæ„ÅæÂëº„Å≥Âá∫„Åó
    processContactPageFinder();

    console.log('ÈÄöÂ∏∏Âá¶ÁêÜ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü');

  } catch (error) {
    console.error('ÈÄöÂ∏∏Âá¶ÁêÜ„Ç®„É©„Éº:', error);
    SpreadsheetApp.getUi().alert('„Ç®„É©„Éº', `ÈÄöÂ∏∏Âá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${error}`, SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * „ÉÅ„Çß„ÉÉ„ÇØË°å„ÅÆ„ÅøÂá¶ÁêÜÔºàÊñ∞Ê©üËÉΩÔºâ
 */
function executeCheckedRowsProcessing(): void {
  console.log('=== „ÉÅ„Çß„ÉÉ„ÇØË°åÂá¶ÁêÜÈñãÂßã ===');

  try {
    const checkedRows = getCheckedRows();

    if (checkedRows.length === 0) {
      SpreadsheetApp.getUi().alert('„ÉÅ„Çß„ÉÉ„ÇØ„Åï„Çå„ÅüË°å„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ');
      return;
    }

    // ÂêÑ„ÉÅ„Çß„ÉÉ„ÇØË°å„ÇíÈ†ÜÊ¨°Âá¶ÁêÜ
    let successCount = 0;
    let failureCount = 0;

    for (const rowNumber of checkedRows) {
      try {
        // LÂàó„Åã„ÇâURLÂèñÂæó
        const url = getUrlFromRow(rowNumber!);

        if (!url || typeof url !== 'string' || url.trim() === '') {
          console.log(`${rowNumber}Ë°åÁõÆ: URL„ÅåÁ©∫„Åß„Åô`);
          continue;
        }

        console.log(`${rowNumber}Ë°åÁõÆ„ÇíÂá¶ÁêÜ‰∏≠: ${url}`);

        // Êó¢Â≠ò„ÅÆfindContactPageÈñ¢Êï∞„Çí‰ΩøÁî®
        const result: ContactPageResult = findContactPage(url);

        // APÂàó„Å´ÁµêÊûú„ÇíÊõ∏„ÅçËæº„Åø
        writeResultToSheet(rowNumber!, result);

        if (result.contactUrl) {
          successCount++;
        } else {
          failureCount++;
        }

      } catch (error) {
        console.error(`${rowNumber}Ë°åÁõÆ„ÅÆÂá¶ÁêÜ„Åß„Ç®„É©„Éº:`, error);
        failureCount++;
      }
    }

    // ÂÆå‰∫Ü„É°„ÉÉ„Çª„Éº„Ç∏
    SpreadsheetApp.getUi().alert('Âá¶ÁêÜÂÆå‰∫Ü', `„ÉÅ„Çß„ÉÉ„ÇØË°åÂá¶ÁêÜ„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇÊàêÂäü: ${successCount}‰ª∂„ÄÅÂ§±Êïó: ${failureCount}‰ª∂`, SpreadsheetApp.getUi().ButtonSet.OK);

  } catch (error) {
    console.error('„ÉÅ„Çß„ÉÉ„ÇØË°åÂá¶ÁêÜ„Ç®„É©„Éº:', error);
    SpreadsheetApp.getUi().alert('„Ç®„É©„Éº', `„ÉÅ„Çß„ÉÉ„ÇØË°åÂá¶ÁêÜ‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: ${error}`, SpreadsheetApp.getUi().ButtonSet.OK);
  }
}

/**
 * ÊåáÂÆöË°å„ÅÆLÂàó„Åã„ÇâURL„ÇíÂèñÂæó
 */
function getUrlFromRow(rowNumber: number): string {
  const sheet = SpreadsheetApp.getActiveSheet();
  const lColumn = 12; // LÂàó

  const cellValue = sheet.getRange(rowNumber, lColumn).getValue();
  return cellValue ? cellValue.toString().trim() : '';
}

/**
 * ÁµêÊûú„ÇíAPÂàó„Å´Êõ∏„ÅçËæº„ÅøÔºàÊó¢Â≠ò„É≠„Ç∏„ÉÉ„ÇØ„Å®ÂÆåÂÖ®„Å´‰∏ÄËá¥Ôºâ
 */
function writeResultToSheet(rowNumber: number, result: ContactPageResult): void {
  const sheet = SpreadsheetApp.getActiveSheet();
  const apColumn = 42; // APÂàó

  // Êó¢Â≠ò„ÅÆprocessContactPageFinder„Å®ÂÆåÂÖ®„Å´Âêå„Åò„É≠„Ç∏„ÉÉ„ÇØ
  let outputValue = '';

  // „Ç®„É©„Éº„ÅÆÂ†¥Âêà„ÅØ„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏„ÇíÂá∫Âäõ
  if (result.searchMethod === 'error' || result.searchMethod === 'dns_error' || result.searchMethod === 'bot_blocked' || result.searchMethod === 'site_closed') {
    if (result.foundKeywords && result.foundKeywords.length > 0) {
      outputValue = result.foundKeywords[0] || '„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü'; // Ë©≥Á¥∞„Ç®„É©„Éº„É°„ÉÉ„Çª„Éº„Ç∏
    } else {
      outputValue = '„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü';
    }
  } else if (result.actualFormUrl) {
    // ÂÆüÈöõ„ÅÆURL„ÅÆÂ†¥Âêà„ÅØ„Åù„ÅÆURL„ÄÅË≠òÂà•Â≠ê„ÅÆÂ†¥Âêà„ÅØ„Éï„Ç©„Éº„É†„ÅåÂ≠òÂú®„Åô„Çã„Éö„Éº„Ç∏„ÅÆURL„ÇíÂá∫Âäõ
    if (result.actualFormUrl.startsWith('http')) {
      outputValue = result.actualFormUrl;
    } else {
      // Ë≠òÂà•Â≠ê„ÅÆÂ†¥Âêà„ÄÅ„Éï„Ç©„Éº„É†„ÅåÂ≠òÂú®„Åô„Çã„Éö„Éº„Ç∏„ÅÆURL„ÇíÂá∫Âäõ
      outputValue = result.contactUrl || 'Âïè„ÅÑÂêà„Çè„Åõ„Éï„Ç©„Éº„É†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü';
    }
  } else if (result.contactUrl) {
    // actualFormUrl„ÅØ„Å™„ÅÑ„Åå„ÄÅcontactUrl„Åå„ÅÇ„ÇãÂ†¥Âêà
    outputValue = result.contactUrl;
  } else {
    // SNS„Éö„Éº„Ç∏„ÇÑË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà
    outputValue = 'Âïè„ÅÑÂêà„Çè„Åõ„Éï„Ç©„Éº„É†„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü';
  }

  sheet.getRange(rowNumber, apColumn).setValue(outputValue);
}

/**
 * AQÂàó„Åß„ÉÅ„Çß„ÉÉ„ÇØ„Åï„Çå„ÅüË°åÁï™Âè∑‰∏ÄË¶ß„ÇíÂèñÂæó
 */
function getCheckedRows(): number[] {
  try {
    console.log('SpreadsheetApp.getActiveSheet()ÂÆüË°å‰∏≠...');
    const sheet = SpreadsheetApp.getActiveSheet();
    console.log('„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Ç∑„Éº„ÉàÂèñÂæóÂÆå‰∫Ü');

    console.log('sheet.getLastRow()ÂÆüË°å‰∏≠...');
    const lastRow = sheet.getLastRow();
    console.log(`ÊúÄÁµÇË°å: ${lastRow}`);

    // Âá¶ÁêÜË°åÊï∞„ÇíÂà∂ÈôêÔºà„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÂØæÁ≠ñÔºâ
    const maxRowsToCheck = Math.min(lastRow, 1000);
    console.log(`„ÉÅ„Çß„ÉÉ„ÇØÂØæË±°Ë°åÊï∞: ${maxRowsToCheck}`);

    const aqColumn = 43; // AQÂàó
    const checkedRows: number[] = [];

    console.log('„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„ÇπÂÄ§„ÅÆÁ¢∫Ë™çÈñãÂßã...');
    for (let row = 2; row <= maxRowsToCheck; row++) {
      try {
        const checkboxValue = sheet.getRange(row, aqColumn).getValue();
        if (checkboxValue === true) {
          checkedRows.push(row);
        }
      } catch (error) {
        console.warn(`${row}Ë°åÁõÆ„ÅÆ„ÉÅ„Çß„ÉÉ„ÇØ„Éú„ÉÉ„ÇØ„ÇπË™≠„ÅøÂèñ„Çä„Ç®„É©„Éº:`, error);
        // ÂÄãÂà•Ë°å„ÅÆ„Ç®„É©„Éº„ÅØÁÑ°Ë¶ñ„Åó„Å¶Á∂öË°å
      }
    }

    console.log(`„ÉÅ„Çß„ÉÉ„ÇØÊ∏à„ÅøË°å: ${checkedRows.length}Ë°å`, checkedRows);
    return checkedRows.filter((row): row is number => typeof row === 'number');
  } catch (error) {
    console.error('getCheckedRows()ÂÖ®‰Ωì„Ç®„É©„Éº:', error);
    return []; // Á©∫ÈÖçÂàó„ÇíËøî„Åô
  }
}

/**
 * „ÉÅ„Çß„ÉÉ„ÇØ„Åï„Çå„ÅüË°åÊï∞„ÇíÂèñÂæó
 */
function getCheckedRowsCount(): number {
  try {
    console.log('getCheckedRows()ÂÆüË°å‰∏≠...');
    const rows = getCheckedRows();
    console.log(`getCheckedRows()ÂÆå‰∫Ü: ${rows.length}Ë°å`);
    return rows.length;
  } catch (error) {
    console.error('getCheckedRows()„Ç®„É©„Éº:', error);
    return 0;
  }
}

/**
 * MAX_COUNTË®≠ÂÆöÂÄ§„ÇíÂèñÂæó
 */
function getMaxCountSetting(): number {
  try {
    console.log('PropertiesService.getScriptProperties()ÂÆüË°å‰∏≠...');
    const properties = PropertiesService.getScriptProperties();
    console.log('„Éó„É≠„Éë„ÉÜ„Ç£„Çµ„Éº„Éì„ÇπÂèñÂæóÂÆå‰∫Ü');

    console.log('MAX_COUNT„Éó„É≠„Éë„ÉÜ„Ç£ÂèñÂæó‰∏≠...');
    const maxCountStr = properties.getProperty('MAX_COUNT');
    console.log(`MAX_COUNT„Éó„É≠„Éë„ÉÜ„Ç£ÂÄ§: "${maxCountStr}"`);

    if (!maxCountStr) {
      console.log('MAX_COUNT„ÅåÊú™Ë®≠ÂÆö„ÄÅ„Éá„Éï„Ç©„É´„ÉàÂÄ§10„Çí‰ΩøÁî®');
      return 10;
    }

    const parsed = parseInt(maxCountStr, 10);
    if (isNaN(parsed) || parsed <= 0) {
      console.log(`MAX_COUNT„ÅÆÂÄ§„ÅåÁÑ°Âäπ: "${maxCountStr}", „Éá„Éï„Ç©„É´„ÉàÂÄ§10„Çí‰ΩøÁî®`);
      return 10;
    }

    console.log(`MAX_COUNTË®≠ÂÆöÂÄ§: ${parsed}`);
    return parsed;
  } catch (error) {
    console.error('getMaxCountSetting()„Ç®„É©„Éº:', error);
    return 10; // „Éá„Éï„Ç©„É´„ÉàÂÄ§
  }
}

